/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "projectkuryr/kuryr/pkg/apis/openstack/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KuryrNetworkLister helps list KuryrNetworks.
// All objects returned here must be treated as read-only.
type KuryrNetworkLister interface {
	// List lists all KuryrNetworks in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.KuryrNetwork, err error)
	// KuryrNetworks returns an object that can list and get KuryrNetworks.
	KuryrNetworks(namespace string) KuryrNetworkNamespaceLister
	KuryrNetworkListerExpansion
}

// kuryrNetworkLister implements the KuryrNetworkLister interface.
type kuryrNetworkLister struct {
	indexer cache.Indexer
}

// NewKuryrNetworkLister returns a new KuryrNetworkLister.
func NewKuryrNetworkLister(indexer cache.Indexer) KuryrNetworkLister {
	return &kuryrNetworkLister{indexer: indexer}
}

// List lists all KuryrNetworks in the indexer.
func (s *kuryrNetworkLister) List(selector labels.Selector) (ret []*v1alpha1.KuryrNetwork, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KuryrNetwork))
	})
	return ret, err
}

// KuryrNetworks returns an object that can list and get KuryrNetworks.
func (s *kuryrNetworkLister) KuryrNetworks(namespace string) KuryrNetworkNamespaceLister {
	return kuryrNetworkNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KuryrNetworkNamespaceLister helps list and get KuryrNetworks.
// All objects returned here must be treated as read-only.
type KuryrNetworkNamespaceLister interface {
	// List lists all KuryrNetworks in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.KuryrNetwork, err error)
	// Get retrieves the KuryrNetwork from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.KuryrNetwork, error)
	KuryrNetworkNamespaceListerExpansion
}

// kuryrNetworkNamespaceLister implements the KuryrNetworkNamespaceLister
// interface.
type kuryrNetworkNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KuryrNetworks in the indexer for a given namespace.
func (s kuryrNetworkNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.KuryrNetwork, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KuryrNetwork))
	})
	return ret, err
}

// Get retrieves the KuryrNetwork from the indexer for a given namespace and name.
func (s kuryrNetworkNamespaceLister) Get(name string) (*v1alpha1.KuryrNetwork, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("kuryrnetwork"), name)
	}
	return obj.(*v1alpha1.KuryrNetwork), nil
}
