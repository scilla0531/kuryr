// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "github.com/gogo/protobuf/gogoproto";

package github.com.kuryr.pkg.apis.cni.v1alpha1;

option go_package = "v1alpha1";

message CniCmdArgs {
    string container_id = 1;
    string netns = 2;
    string ifname = 3;
    string args = 4;
    string path = 5;
    bytes network_configuration = 6;
}

message CniCmdRequest {
    CniCmdArgs cni_args = 1;
}

enum ErrorCode {
    UNKNOWN = 0;
    INCOMPATIBLE_CNI_VERSION = 1;
    UNSUPPORTED_FIELD = 2;
    UNKNOWN_CONTAINER = 3;
    INVALID_ENVIRONMENT_VARIABLES = 4;
    IO_FAILURE = 5;
    DECODING_FAILURE = 6;
    INVALID_NETWORK_CONFIG = 7;
    TRY_AGAIN_LATER = 11;
    IPAM_FAILURE = 101;
    CONFIG_INTERFACE_FAILURE = 102;
    CHECK_INTERFACE_FAILURE = 103;
    // these errors are not used by the servers, but we declare them here to
    // make sure they are reserved.
    UNKNOWN_RPC_ERROR = 201;
    INCOMPATIBLE_API_VERSION = 202;
}

message Error {
    ErrorCode code = 1;
    string message = 2;
    // repeated google.protobuf.Any details = 3;
    repeated int32 details = 3;
}

message CniCmdResponse {
    bytes cni_result = 1;
    Error error = 2;
}

service Cni {
    rpc CmdAdd (CniCmdRequest) returns (CniCmdResponse) {
    }

    rpc CmdCheck (CniCmdRequest) returns (CniCmdResponse) {
    }

    rpc CmdDel (CniCmdRequest) returns (CniCmdResponse) {
    }
}
