/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "projectkuryr/kuryr/pkg/apis/openstack/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KuryrNetworkPolicyLister helps list KuryrNetworkPolicies.
// All objects returned here must be treated as read-only.
type KuryrNetworkPolicyLister interface {
	// List lists all KuryrNetworkPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.KuryrNetworkPolicy, err error)
	// KuryrNetworkPolicies returns an object that can list and get KuryrNetworkPolicies.
	KuryrNetworkPolicies(namespace string) KuryrNetworkPolicyNamespaceLister
	KuryrNetworkPolicyListerExpansion
}

// kuryrNetworkPolicyLister implements the KuryrNetworkPolicyLister interface.
type kuryrNetworkPolicyLister struct {
	indexer cache.Indexer
}

// NewKuryrNetworkPolicyLister returns a new KuryrNetworkPolicyLister.
func NewKuryrNetworkPolicyLister(indexer cache.Indexer) KuryrNetworkPolicyLister {
	return &kuryrNetworkPolicyLister{indexer: indexer}
}

// List lists all KuryrNetworkPolicies in the indexer.
func (s *kuryrNetworkPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.KuryrNetworkPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KuryrNetworkPolicy))
	})
	return ret, err
}

// KuryrNetworkPolicies returns an object that can list and get KuryrNetworkPolicies.
func (s *kuryrNetworkPolicyLister) KuryrNetworkPolicies(namespace string) KuryrNetworkPolicyNamespaceLister {
	return kuryrNetworkPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KuryrNetworkPolicyNamespaceLister helps list and get KuryrNetworkPolicies.
// All objects returned here must be treated as read-only.
type KuryrNetworkPolicyNamespaceLister interface {
	// List lists all KuryrNetworkPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.KuryrNetworkPolicy, err error)
	// Get retrieves the KuryrNetworkPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.KuryrNetworkPolicy, error)
	KuryrNetworkPolicyNamespaceListerExpansion
}

// kuryrNetworkPolicyNamespaceLister implements the KuryrNetworkPolicyNamespaceLister
// interface.
type kuryrNetworkPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KuryrNetworkPolicies in the indexer for a given namespace.
func (s kuryrNetworkPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.KuryrNetworkPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KuryrNetworkPolicy))
	})
	return ret, err
}

// Get retrieves the KuryrNetworkPolicy from the indexer for a given namespace and name.
func (s kuryrNetworkPolicyNamespaceLister) Get(name string) (*v1alpha1.KuryrNetworkPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("kuryrnetworkpolicy"), name)
	}
	return obj.(*v1alpha1.KuryrNetworkPolicy), nil
}
